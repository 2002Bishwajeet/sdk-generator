{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst}}>{% else %}{{property.sub_schema | caseUcfirst}}{% endif %}{% else %}{{property.type | typeName}}{% endif %}{% endmacro %}
part of {{ language.params.packageName }};

class {{ definition.name | caseUcfirst }} {
{% for property in definition.properties %}
    {% if not property.required %}{{_self.sub_schema(property)}}? {{ property.name | escapeKeyword }}{% else %}{{_self.sub_schema(property)}} {{ property.name | escapeKeyword }}{% endif %};
{% endfor %}

    {{ definition.name | caseUcfirst}}({
{% for property in definition.properties %}{% if property.required %}
        required {% endif %}this.{{ property.name | escapeKeyword }},
{% endfor %}
    });

    factory {{ definition.name | caseUcfirst}}.fromMap(Map<String, dynamic> map) {
        return {{ definition.name | caseUcfirst }}(
{% for property in definition.properties %}
            {{ property.name | escapeKeyword }}: {% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst}}>.from(map['{{property.name | escapeDollarSign }}'].map((p) => {{property.sub_schema | caseUcfirst}}.fromMap(p))){% else %}{{property.sub_schema | caseUcfirst}}.fromMap(map['{{property.name | escapeDollarSign }}']){% endif %}{% else %}map['{{property.name | escapeDollarSign }}']{% endif %},
{% endfor %}
        );
    }

    Map<String, dynamic> toMap() {
        return {
{% for property in definition.properties %}
            "{{ property.name | escapeDollarSign }}": {% if property.sub_schema %}{% if property.type == 'array' %}{{property.name | escapeKeyword}}.map((p) => p.toMap()){% else %}{{property.name | escapeKeyword}}.toMap(){% endif %}{% else %}{{property.name | escapeKeyword }}{% endif %},
{% endfor %}
        };
    }
}

